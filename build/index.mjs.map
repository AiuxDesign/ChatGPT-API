{"version":3,"sources":["../src/ConversationStore.ts","../src/utils/request.ts","../src/utils/urls.ts","../src/utils/index.ts","../src/ChatGPT.ts"],"sourcesContent":["import Keyv from 'keyv'\r\nimport LRUCache from 'lru-cache'\r\n\r\nimport {\r\n  IChatGPTResponse,\r\n  IChatGPTUserMessage,\r\n  IChatGPTSystemMessage,\r\n} from './types'\r\n\r\ntype TCommonMessage =\r\n  | IChatGPTResponse\r\n  | IChatGPTUserMessage\r\n  | IChatGPTSystemMessage\r\n\r\n/**\r\n * conversation manage\r\n */\r\nexport default class ConversationStore {\r\n  #store: Keyv<TCommonMessage, any>\r\n  constructor() {\r\n    const lru = new LRUCache<string, TCommonMessage>({\r\n      max: 10000,\r\n    })\r\n    this.#store = new Keyv<TCommonMessage, any>({\r\n      store: lru,\r\n    })\r\n  }\r\n  /**\r\n   * get message by id\r\n   * @param id\r\n   * @returns\r\n   */\r\n  async get(id: string): Promise<TCommonMessage | undefined> {\r\n    return await this.#store.get(id)\r\n  }\r\n  /**\r\n   * set new message\r\n   * @param msg\r\n   * @returns\r\n   */\r\n  async set(msg: TCommonMessage): Promise<boolean> {\r\n    return await this.#store.set(msg.id, msg)\r\n  }\r\n  /**\r\n   * check if the id exists in the store\r\n   * @param id\r\n   * @returns\r\n   */\r\n  async has(id: string): Promise<boolean> {\r\n    return await this.#store.has(id)\r\n  }\r\n  /**\r\n   * delete one message\r\n   * @param id\r\n   * @returns\r\n   */\r\n  async delete(id: string): Promise<boolean> {\r\n    return await this.#store.delete(id)\r\n  }\r\n  /**\r\n   * clear one conversation，it will be used when you set a new system prompt，which means that you will be in a new context，so early messages will be deleted\r\n   * @param id last conversation id\r\n   */\r\n  async clear1Conversation(id: string) {\r\n    let parentMessageId: string | undefined = id\r\n    while (parentMessageId && this.has(parentMessageId)) {\r\n      const msg: TCommonMessage | undefined = await this.get(parentMessageId)\r\n      if (msg) {\r\n        await this.delete(msg.id)\r\n      }\r\n      parentMessageId = msg?.parentMessageId\r\n    }\r\n    console.log('conversation cleared')\r\n  }\r\n\r\n  /**\r\n   * clear the store\r\n   */\r\n  async clearAll() {\r\n    await this.#store.clear()\r\n  }\r\n}\r\n","import axios from 'axios'\nimport type { RawAxiosRequestConfig } from 'axios'\n\ninterface IRequestOpts {\n  debug?: boolean\n}\n\nexport async function get(config: RawAxiosRequestConfig, opts: IRequestOpts) {\n  const ins = axios.create({\n    method: 'GET',\n  })\n  if (opts.debug) {\n    console.log({ headers: ins.defaults.headers, data: ins.defaults.data })\n  }\n  return (await ins({ ...config })).data\n}\nexport async function post(config: RawAxiosRequestConfig, opts: IRequestOpts) {\n  const ins = axios.create({\n    method: 'POST',\n  })\n  if (opts.debug) {\n    ins.interceptors.request.use((config) => {\n      console.log(config)\n      return config\n    })\n  }\n  return (await ins({ ...config })).data\n}\n","/**\n * docs https://platform.openai.com/docs/api-reference/chat\n */\nconst urls = {\n  listModels: 'https://api.openai.com/v1/models', // get\n  createCompletion: 'https://api.openai.com/v1/completions', // post\n  createChatCompletion: 'https://api.openai.com/v1/chat/completions' // post\n}\n\nexport default urls\n","import { v4 as uuid } from 'uuid'\r\nimport { stdin, stdout } from 'process'\r\nimport { createInterface } from 'readline'\r\n\r\nexport function getReadLine() {\r\n  const rl = createInterface({ input: stdin, output: stdout })\r\n  const iter = rl[Symbol.asyncIterator]()\r\n  return async () => (await iter.next()).value\r\n}\r\n\r\n/**\r\n * generate unique id by uuidV4\r\n */\r\nexport function genId() {\r\n  return uuid()\r\n}\r\n","import { AxiosRequestConfig } from 'axios'\n\nimport ConversationStore from './ConversationStore'\nimport {\n  IChatCompletion,\n  IChatGPTResponse,\n  IChatGPTUserMessage,\n  ERole,\n  ChatGPTHTTPDataMessages,\n} from './types'\nimport { post } from './utils/request'\nimport URLS from './utils/urls'\nimport { genId } from './utils/index'\n\n// https://platform.openai.com/docs/api-reference/chat\n// curl https://api.openai.com/v1/chat/completions \\\n//   -H 'Content-Type: application/json' \\\n//   -H 'Authorization: Bearer YOUR_API_KEY' \\\n//   -d '{\n//   \"model\": \"gpt-3.5-turbo\",\n//   \"messages\": [{\"role\": \"user\", \"content\": \"Hello!\"}]\n// }'\n\ninterface IChatGPTParams {\n  /**\n   * apiKey, you can get it in https://platform.openai.com/account/api-keys,You can apply for up to 5 at most.\n   */\n  apiKey: string\n  /**\n   * model，default is 'gpt-3.5-turbo'\n   */\n  model?: string\n  /**\n   * print request config\n   */\n  debug?: boolean\n  /**\n   * axios configs\n   */\n  requestConfig?: AxiosRequestConfig\n}\n\n// role https://platform.openai.com/docs/guides/chat/introduction\nexport class ChatGPT {\n  #apiKey = ''\n  #model = ''\n  #urls = URLS\n  #debug = false\n  #requestConfig?: AxiosRequestConfig = {}\n  #store = new ConversationStore()\n  constructor(opts: IChatGPTParams) {\n    this.#apiKey = opts.apiKey\n    this.#model = opts.model || 'gpt-3.5-turbo'\n    this.#debug = opts.debug || false\n    this.#requestConfig = opts.requestConfig || {}\n  }\n\n  /**\n   * send message to ChatGPT server\n   * @param text string new message\n   * @param opts configs\n   * @returns\n   */\n  async createChatCompletion(\n    opts:\n      | { text: string; systemPrompt?: string; parentMessageId?: string }\n      | string,\n  ) {\n    opts = typeof opts === 'string' ? { text: opts } : opts\n    if (opts.systemPrompt) {\n      opts.parentMessageId = undefined\n      if(opts.parentMessageId) await this.#store.clear1Conversation(opts.parentMessageId)\n    }\n    const model = this.#model\n    const userMessage: IChatGPTUserMessage = {\n      id: genId(),\n      text: opts.text,\n      role: ERole.user,\n      parentMessageId: opts.parentMessageId,\n    }\n    const messages = await this.#makeConversations(\n      userMessage,\n      opts.systemPrompt,\n    )\n    if (this.#debug) {\n      console.log('messages', messages)\n    }\n    const res = (await post(\n      {\n        url: this.#urls.createChatCompletion,\n        headers: {\n          Authorization: this.#genAuthorization(),\n          'Content-Type': 'application/json',\n        },\n        data: {\n          model,\n          messages,\n        },\n        ...this.#requestConfig,\n      },\n      {\n        debug: this.#debug,\n      },\n    )) as IChatCompletion\n    if (this.#debug) {\n      console.log('response', \n        JSON.stringify({\n          ...res,\n          choices: [],\n        }),\n      )\n    }\n    const response: IChatGPTResponse = {\n      id: res.id,\n      text: res?.choices[0]?.message?.content,\n      created: res.created,\n      model: res.model,\n      role: ERole.assistant,\n      parentMessageId: userMessage.id,\n    }\n    await this.#store.set(userMessage)\n    await this.#store.set(response)\n    return response\n  }\n\n  /**\n   * make conversations for http request data.messages\n   */\n  async #makeConversations(userMessage: IChatGPTUserMessage, prompt?: string) {\n    let parentMessageId: string | undefined = userMessage.parentMessageId\n    const messages: ChatGPTHTTPDataMessages = []\n    if (prompt) {\n      messages.push({\n        role: ERole.system,\n        content: prompt,\n      })\n    } else {\n      while (parentMessageId && this.#store.has(parentMessageId)) {\n        const msg = await this.#store.get(parentMessageId)\n        if (msg) {\n          messages.unshift({\n            role: msg.role,\n            content: msg.text,\n          })\n        }\n        parentMessageId = msg?.parentMessageId\n      }\n    }\n\n    messages.push({\n      role: ERole.user,\n      content: userMessage.text,\n    })\n    return messages\n  }\n\n  /**\n   * generate HTTP Authorization\n   * @returns\n   */\n  #genAuthorization() {\n    return `Bearer ${this.#apiKey}`\n  }\n}\n"],"mappings":"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","names":["config","_store"]}